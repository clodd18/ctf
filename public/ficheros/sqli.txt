La primera categoría de vulnerabilidades sobre la que vamos a crear retos es la de Inyección de SQL. Los ataques de Inyección de SQL son ataques que se suelen realizar sobre formularios que se encuentran en nuestra página web. Dichos formularios hacen consultas a la base de datos para de esta manera obtener los resultados que se desean. Si estos formularios no se encuentran bien configurados y los parámetros y las consultas no son debidamente validadas, podríamos estar dejando una puerta abierta a que puedan hacernos un ataque de este tipo, ya que podrían inyectar comandos SQL directamente sobre nuestra base de datos a voluntad. Un ataque exitoso de inyección de SQL puede provocar el acceso a datos confidenciales, contraseñas, tarjetas de crédito, pueden provocar el borrado de datos, o la modificación de dichos datos para entorpecer el funcionamiento de la web y negocio que pueda haber detrás o provocar daños graves a la reputación de dicho negocio. Es posible que, en algunos casos, incluso se logre a través de dichas intrusiones, llegar al sistema operativo de la maquina y tomar el control de esta o incluso de la infraestructura al completo.
Existen varios tipos de ataque de inyección de SQL:
-	Ataques por error, es el más típico y fácil de explotar de los errores que nos podemos encontrar en una página web vulnerable. El fallo consiste en que la propia aplicación web nos va indicando a través de unos errores en pantalla, de los fallos que están habiendo en la base de datos, por tanto, podemos ver la consulta que se esta realizando y a su vez modificar nuestra llamada para aprovecharnos de ella y llegar a hacer el ataque.
-	Ataques de tipo UNION. En este tipo de ataque lo que tenemos es que el portal nos devuelve un resultado en función de los parámetros que introducimos en su formulario. El ataque consiste en añadir al resultado normal de la web, el resultado de otra query a través de una sentencia UNION para de esta forma se ejecuten las dos instrucciones, la que la web tiene predefinida y la que hemos unido nosotros.
-	Ataques ciegos, son los más complicados de explotar y los que suelen llevar mas tiempo. En este caso lo que se hace es ir preguntando a la base de datos para que responda de manera actúe de una forma u otra en caso de cumplir una condición o no, pero sin realmente devolvernos un dato de nuestra base de datos. Existen dos tipos de ataques en función de que podamos ver como resultado en la web: los basados en condicionales, es decir, si la consulta es correcta da un resultado, si es incorrecta da otro; y los basados en tiempo, si la consulta es correcta, la web responde de manera correcta, pero con un tiempo de retardo que hemos establecido, pero si no es correcta, no se produce dicho retardo.
¿Cómo puedo evitar este tipo de ataques? Para evitar este tipo de ataques existen distintos mecanismos y es muy importante que todos ellos sean tomados en cuenta a la hora de programar una página web y asegurarse de que todos ellos están activos y funcionales antes de pasarla a producción:
-	Validar los datos. Lo que haremos será comprobar todos los datos que se solicitan al usuario y comprobar que todos los datos cumplen unos ciertos requisitos de validación. Por ejemplo, si se esperan números que solo haya números, si se espera un nombre que no haya números o caracteres especiales.
-	Evitar la exposición. Dejar solo accesible aquellas bases de datos que la web vaya a necesitar y evitar el acceso a otras bases de datos internas que nos sean necesarias y más críticas.
-	Escapar los comandos. Lo que se pretende con esto es evitar que nuestro formulario sea capaz de ejecutar sentencias propias del lenguaje de base de datos.
-	Usar herramientas de análisis. Existen multitud de herramientas, ya sean de pago o gratuitas que periódicamente se pueden ejecutar sobre la web para indicarnos si nuestros formularios son susceptibles de sufrir un ataque de este tipo.
En el caso particular de Laravel se incluye Eloquent, un mapeador relacional de objetos (ORM) que hace que sea agradable interactuar con su base de datos. Al usar Eloquent, cada tabla de la base de datos tiene un "Modelo" correspondiente que se usa para interactuar con esa tabla. Además de recuperar registros de la tabla de la base de datos, los modelos Eloquent también le permiten insertar, actualizar y eliminar registros de la tabla. El uso de Eloquent para realizar toda la interacción con la base de datos, evita la posibilidad de casi la totalidad de las inyecciones de SQL ya que se encarga de validad, escapar y analizar en general todas las consultas y asegurarse de que ninguna escapa a lo establecido en el Modelo programado y a los parámetros preestablecidos.
