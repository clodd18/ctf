La inyección de código es un tipo de vulnerabilidad que permite a los atacantes introducir código fuente en una aplicación de forma que es interpretado y ejecutado.
Este código malicioso puede ser cargado directamente desde un input, pero también puede ser manipulada la aplicación para que lo cargue desde el sistema local de archivos o desde una fuente externe como una dirección URL.
El principal motivo por el que se pueden realizar este ataque es el de un fallo en la validación de los campos de entrada en los formularios y que posteriormente este valor sea evaluado directamente como código PHP. También puede ocurrir por no asegurar correctamente los repositorios de código fuente o por descargar librerías externas sin tomar las medidas de seguridad necesarias. También puede estar provocado por una mala configuración del servidor que permite incluir ficheros que no sea PHP dentro de nuestro proyecto y que se ejecuten como si lo fueran.
Un fallo común que da lugar a esta vulnerabilidad es cuando un desarrollador usa la función PHP eval(), un atacante tiene el potencial de modificar e inyectar código en la aplicación ya que esta función evalúa el código que se le pasa como parámetro como si fuera código PHP.
El impacto sobre esta vulnerabilidad puede afectar a una pérdida de datos, corrupción de datos, ataques de denegación de acceso o de apropiación completa del host sobre el que se ejecuta la aplicación vulnerable.
En general, es una buena idea evitar cualquier comando que llame al entorno operativo directamente desde PHP. Desde la perspectiva del vector de ataque, esto brinda a los atacantes muchas oportunidades para realizar actividades maliciosas directamente en la pila del servidor web.
En el pasado, funciones como exec(), shell_exec(), system()y passthru()se usaban comúnmente para realizar funciones como comprimir o descomprimir archivos, crear trabajos cron y navegar por archivos y carpetas del sistema operativo. Sin embargo, tan pronto como estas funciones cumplen con las entradas del usuario que no están específicamente validadas, surgen vulnerabilidades graves.
PHP proporciona operadores funcionales con escape integrado, por ejemplo, escapeshellcmd()y escapeshellarg(). Cuando estos operadores se utilizan en las entradas antes de pasarlas a una función sensible, realizan cierto nivel de filtrado. Sin embargo, estas funciones no son infalibles contra todas las posibles técnicas de ataque.
Por lo tanto, la validación y el manejo de la entrada del usuario es primordial para la seguridad de la aplicación PHP. Siempre que acepte la entrada del usuario, debe asegurarse de que sea válida, almacenarla y procesarla de tal manera que no permita ataques contra la aplicación. Recuerde que cualquier entrada es un vector de ataque abierto que permite que un atacante malintencionado interactúe con su aplicación.
