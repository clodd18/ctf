Cross-site Scripting (XSS) es un ataque de inyección de código del lado del cliente. El atacante tiene como objetivo ejecutar scripts maliciosos en un navegador web de la víctima mediante la inclusión de código malicioso en una página web. El ataque real ocurre cuando la víctima visita la página web que ejecuta el código malicioso. La página web se convierte en un vehículo para entregar el script malicioso al navegador del usuario. Los vehículos vulnerables que se utilizan comúnmente para los ataques de Cross-site Scripting son foros, tableros de mensajes y páginas web que permiten comentarios.
Una página es vulnerable a XSS si utiliza una entrada de usuario no desinfectada en la salida que genera. Esta entrada del usuario debe ser analizada por el navegador de la víctima. Los ataques XSS son posibles en VBScript, ActiveX, Flash e incluso CSS. Sin embargo, son más comunes en JavaScript, principalmente porque JavaScript es fundamental para la mayoría de las experiencias de navegación.
Podría parecer que, por lo que se ha dicho más arriba, el ataque de XSS es un problema para el usuario y no para la web que se ha visto comprometida, pero es una fuga de seguridad provocada por la web y como tal, debe ser revisada y subsanada, ya que la imagen y fiabilidad de la plataforma se puede ver afectada, veamos un ejemplo. Las consecuencias de la capacidad de ejecutar JavaScript en una página web pueden no parecer nefastas al principio. La mayoría de los navegadores web ejecutan JavaScript en un entorno muy controlado. JavaScript tiene acceso limitado al sistema operativo del usuario y a los archivos del usuario. Sin embargo, JavaScript aún puede ser peligroso si se usa incorrectamente como parte de contenido malicioso:
-	El JavaScript malicioso tiene acceso a todos los objetos a los que tiene acceso el resto de la página web. Esto incluye el acceso a las cookies del usuario. Las cookies se utilizan a menudo para almacenar tokens de sesión. Si un atacante puede obtener la cookie de sesión de un usuario, puede hacerse pasar por ese usuario, realizar acciones en nombre del usuario y obtener acceso a los datos confidenciales del usuario.
-	JavaScript puede leer el DOM del navegador y hacerle modificaciones arbitrarias. Afortunadamente, esto solo es posible dentro de la página donde se ejecuta JavaScript.
-	JavaScript puede usar el XMLHttpRequestobjeto para enviar solicitudes HTTP con contenido arbitrario a destinos arbitrarios.
-	JavaScript en los navegadores modernos puede usar API HTML5. Por ejemplo, puede obtener acceso a la geolocalización, cámara web, micrófono e incluso archivos específicos del sistema de archivos del usuario. La mayoría de estas API requieren la aceptación del usuario, pero el atacante puede usar la ingeniería social para sortear esa limitación.
Lo anterior, en combinación con la ingeniería social, permite a los delincuentes realizar ataques avanzados que incluyen el robo de cookies, la plantación de troyanos, el registro de teclas, el phishing y el robo de identidad. Las vulnerabilidades XSS proporcionan el terreno perfecto para escalar los ataques a otros más serios. Cross-site Scripting también se puede usar junto con otros tipos de ataques, por ejemplo, Cross-Site Request Forgery (CSRF).
Hay tres tipos principales de ataques XSS. Estos son:
-	XSS reflejado , donde el script malicioso proviene de la solicitud HTTP actual, que luego es procesado por la aplicación web y desplegado en un punto determinado sin validación de por medio.
-	XSS almacenado , donde el script malicioso proviene de la base de datos del sitio web, que permanece un texto inofensivo, hasta que es recuperado y utilizado como parte del HTML en donde una vez procesado adquiere funcionalidad maliciosa.
-	XSS basado en DOM , donde la vulnerabilidad existe en el código del lado del cliente en lugar del código del lado del servidor. El Document Object Model (DOM) es una interfaz de programación para representar la estructura de un documento web y conectarlo con un lenguaje de scripting. En este sentido, el DOM facilita la estructura de documentos como HTML o XML y permite a los programas modificar la estructura, estilo y contenido del documento.
¿Cómo podemos prevenir ataques XSS? La prevención de secuencias de comandos entre sitios es trivial en algunos casos, pero puede ser mucho más difícil según la complejidad de la aplicación y la forma en que maneja los datos controlables por el usuario. En general, es probable que la prevención eficaz de las vulnerabilidades XSS implique una combinación de las siguientes medidas:
-	Entrada de filtro a la llegada. En el punto donde se recibe la entrada del usuario, filtre lo más estrictamente posible en función de lo que se espera o de la entrada válida.
-	Codificar datos en la salida. En el punto donde los datos controlables por el usuario se emiten en las respuestas HTTP, codifique la salida para evitar que se interprete como contenido activo. Según el contexto de salida, esto puede requerir la aplicación de combinaciones de codificación HTML, URL, JavaScript y CSS.
-	Use encabezados de respuesta apropiados. Para evitar XSS en las respuestas HTTP que no están destinadas a contener HTML o JavaScript, puede usar los encabezados Content-Typey X-Content-Type-Optionspara asegurarse de que los navegadores interpreten las respuestas de la manera que desea.
-	Política de seguridad de contenido. Como última línea de defensa, puede usar la Política de seguridad de contenido (CSP) para reducir la gravedad de las vulnerabilidades XSS que aún ocurren.
