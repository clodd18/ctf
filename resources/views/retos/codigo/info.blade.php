<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg">
                <div class="p-6 sm:px-20 bg-white border-b border-gray-200">
                    <div class="mt-8 text-2xl">
                        Inyección de Código
                    </div>
                    <div class="mt-6 text-gray-500">
                    <br />
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>La inyecci&oacute;n de c&oacute;digo es un tipo de vulnerabilidad que permite a los atacantes introducir c&oacute;digo fuente en una aplicaci&oacute;n de forma que es interpretado y ejecutado.&nbsp;</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>Este c&oacute;digo malicioso puede ser cargado directamente desde un input, pero tambi&eacute;n puede ser manipulada la aplicaci&oacute;n para que lo cargue desde el sistema local de archivos o desde una fuente externe como una direcci&oacute;n URL.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>El principal motivo por el que se pueden realizar este ataque es el de un fallo en la validaci&oacute;n de los campos de entrada en los formularios y que posteriormente este valor sea evaluado directamente como c&oacute;digo PHP. Tambi&eacute;n puede ocurrir por no asegurar correctamente los repositorios de c&oacute;digo fuente o por descargar librer&iacute;as externas sin tomar las medidas de seguridad necesarias. Tambi&eacute;n puede estar provocado por una mala configuraci&oacute;n del servidor que permite incluir ficheros que no sea PHP dentro de nuestro proyecto y que se ejecuten como si lo fueran.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>Un fallo com&uacute;n que da lugar a esta vulnerabilidad es cuando un desarrollador usa la funci&oacute;n PHP eval(), un atacante tiene el potencial de modificar e inyectar c&oacute;digo en la aplicaci&oacute;n ya que esta funci&oacute;n eval&uacute;a el c&oacute;digo que se le pasa como par&aacute;metro como si fuera c&oacute;digo PHP.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>El impacto sobre esta vulnerabilidad puede afectar a una p&eacute;rdida de datos, corrupci&oacute;n de datos, ataques de denegaci&oacute;n de acceso o de apropiaci&oacute;n completa del host sobre el que se ejecuta la aplicaci&oacute;n vulnerable.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>En general, es una buena idea evitar cualquier comando que llame al entorno operativo directamente desde PHP. Desde la perspectiva del vector de ataque, esto brinda a los atacantes muchas oportunidades para realizar actividades maliciosas directamente en la pila del servidor web.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>En el pasado, funciones como exec(), shell_exec(), system()y passthru()se usaban com&uacute;nmente para realizar funciones como comprimir o descomprimir archivos, crear trabajos cron y navegar por archivos y carpetas del sistema operativo. Sin embargo, tan pronto como estas funciones cumplen con las entradas del usuario que no est&aacute;n espec&iacute;ficamente validadas, surgen vulnerabilidades graves.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>PHP proporciona operadores funcionales con escape integrado, por ejemplo, escapeshellcmd()y escapeshellarg(). Cuando estos operadores se utilizan en las entradas antes de pasarlas a una funci&oacute;n sensible, realizan cierto nivel de filtrado. Sin embargo, estas funciones no son infalibles contra todas las posibles t&eacute;cnicas de ataque.</span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'><br></span></p>
                    <p style='margin: 3pt 0cm 0cm; text-align: justify; line-height: 1.5; font-size: 16px; font-family: "Times New Roman", serif;'><span style='font-family: "Times New Roman", Times, serif; font-size: 18px;'>Por lo tanto, la validaci&oacute;n y el manejo de la entrada del usuario es primordial para la seguridad de la aplicaci&oacute;n PHP. Siempre que acepte la entrada del usuario, debe asegurarse de que sea v&aacute;lida, almacenarla y procesarla de tal manera que no permita ataques contra la aplicaci&oacute;n. Recuerde que cualquier entrada es un vector de ataque abierto que permite que un atacante malintencionado interact&uacute;e con su aplicaci&oacute;n.</span></p>
                    </div>
                    <a href="{{ url()->previous() }}" class="mt-2 ml-12 inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 active:bg-gray-900 focus:outline-none focus:border-gray-900 focus:ring focus:ring-gray-300 disabled:opacity-25 transition'">Volver</a>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
